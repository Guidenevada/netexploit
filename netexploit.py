import os
import sys
import time
import requests
import json
import urllib3
import urllib
import hashlib
import socket

def download_file(url, filename):
    # NOTE the stream=True parameter
    r = requests.get(url, stream=True)
    with open(filename, 'wb') as f:
        for chunk in r.iter_content(chunk_size=1024): 
            if chunk: # filter out keep-alive new chunks
                f.write(chunk)
                #f.flush()
    return filename

def get_file_size(filename):
    return os.stat(filename).st_size

def get_file_md5(filename):
    import hashlib
    hash_md5 = hashlib.md5()
    with open(filename, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()


def upload_file(url, filename):
    files = {'file': open(filename, 'rb')}
    r = requests.post(url, files=files)
    return r.text

def get_file_list(url):
    r = requests.get(url)
    return r.text


def scan_network(ip_range):
    ip_list = []
    for i in range(1, 255):
        ip = ip_range + str(i)
        try:
            socket.inet_aton(ip)
            ip_list.append(ip)
        except socket.error:
            pass
    return ip_list

def main():
    urllib3.disable_warnings()
    if len(sys.argv) < 2:
        print("Usage: python3 %s <target_ip_range>" % sys.argv[0])
        exit(1)
    target_ip_range = sys.argv[1]
    ip_list = scan_network(target_ip_range)
    for ip in ip_list:
        try:
            url = "http://" + ip + ":8080/upload"
            print("[*] Testing %s" % url)
            r = requests.get(url)
            if r.status_code == 200:
                print("[+] %s is vulnerable" % url)
                filename = "test.txt"
                download_file(url, filename)
                print("[+] File %s downloaded" % filename)
                print("[+] File size: %s" % get_file_size(filename))
                print("[+] File md5: %s" % get_file_md5(filename))
                upload_file(url, filename)
                print("[+] File %s uploaded" % filename)
                os.remove(filename)
                print("[+] File %s removed" % filename)
        except Exception as e:
            pass

if __name__ == "__main__":
    main()
